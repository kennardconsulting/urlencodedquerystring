<HTML><HEAD><META CONTENT="text/html; charset=ISO-8859-1" HTTP-EQUIV="Content-Type"/><TITLE>EMMA Coverage Report</TITLE><STYLE TYPE="text/css"> TABLE,TD,TH {border-style:solid; border-color:black;} TD,TH {background:white;margin:0;line-height:100%;padding-left:0.5em;padding-right:0.5em;} TD {border-width:0 1px 0 0;} TH {border-width:1px 1px 1px 0;} TR TD.h {color:red;} TABLE {border-spacing:0; border-collapse:collapse;border-width:0 0 1px 1px;} P,H1,H2,H3,TH {font-family:verdana,arial,sans-serif;font-size:10pt;} TD {font-family:courier,monospace;font-size:10pt;} TABLE.hdft {border-spacing:0;border-collapse:collapse;border-style:none;} TABLE.hdft TH,TABLE.hdft TD {border-style:none;line-height:normal;} TABLE.hdft TH.tl,TABLE.hdft TD.tl {background:#6699CC;color:white;} TABLE.hdft TD.nv {background:#6633DD;color:white;} .nv A:link {color:white;} .nv A:visited {color:white;} .nv A:active {color:yellow;} TABLE.hdft A:link {color:white;} TABLE.hdft A:visited {color:white;} TABLE.hdft A:active {color:yellow;} .in {color:#356085;} TABLE.s TD {padding-left:0.25em;padding-right:0.25em;} TABLE.s TD.l {padding-left:0.25em;padding-right:0.25em;text-align:right;background:#F0F0F0;} TABLE.s TR.z TD {background:#FF9999;} TABLE.s TR.p TD {background:#FFFF88;} TABLE.s TR.c TD {background:#CCFFCC;} A:link {color:#0000EE;text-decoration:none;} A:visited {color:#0000EE;text-decoration:none;} A:hover {color:#0000EE;text-decoration:underline;} TABLE.cn {border-width:0 0 1px 0;} TABLE.s {border-width:1px 0 1px 1px;} TD.h {color:red;border-width:0 1px 0 0;} TD.f {border-width:0 1px 0 1px;} TD.hf {color:red;border-width:0 1px 0 1px;} TH.f {border-width:1px 1px 1px 1px;} TR.cis TD {background:#F0F0F0;} TR.cis TD {border-width:1px 1px 1px 0;} TR.cis TD.h {color:red;border-width:1px 1px 1px 0;} TR.cis TD.f {border-width:1px 1px 1px 1px;} TR.cis TD.hf {color:red;border-width:1px 1px 1px 1px;} TD.b {border-style:none;background:transparent;line-height:50%;}  TD.bt {border-width:1px 0 0 0;background:transparent;line-height:50%;} TR.o TD {background:#F0F0F0;}TABLE.it {border-style:none;}TABLE.it TD,TABLE.it TH {border-style:none;}</STYLE></HEAD><BODY><TABLE CLASS="hdft" CELLSPACING="0" WIDTH="100%"><TR><TH CLASS="tl"><A HREF="http://emma.sourceforge.net/">EMMA</A> Coverage Report (generated Tue Feb 24 09:48:42 EST 2009)</TH></TR><TR><TD CLASS="nv">[<A HREF="../coverage.html">all classes</A>][<A HREF="0.html">com.kennardconsulting.core.net</A>]</TD></TR></TABLE><H2>COVERAGE SUMMARY FOR SOURCE FILE [<SPAN CLASS="in">UrlEncodedQueryString.java</SPAN>]</H2><TABLE CELLSPACING="0" WIDTH="100%"><TR><TH>name</TH><TH>class, %</TH><TH>method, %</TH><TH>block, %</TH><TH>line, %</TH></TR><TR><TD>UrlEncodedQueryString.java</TD><TD>100% (1/1)</TD><TD>100% (26/26)</TD><TD>97%  (513/531)</TD><TD>96%  (129.2/135)</TD></TR></TABLE><H3>COVERAGE BREAKDOWN BY CLASS AND METHOD</H3><TABLE CLASS="cn" CELLSPACING="0" WIDTH="100%"><TR><TH CLASS="f">name</TH><TH>class, %</TH><TH>method, %</TH><TH>block, %</TH><TH>line, %</TH></TR><TR><TD CLASS="b"> </TD><TD CLASS="b"> </TD><TD CLASS="b"> </TD><TD CLASS="b"> </TD><TD CLASS="b"> </TD></TR><TR CLASS="cis"><TD CLASS="f">class <A HREF="#0">UrlEncodedQueryString</A></TD><TD>100% (1/1)</TD><TD>100% (26/26)</TD><TD>97%  (513/531)</TD><TD>96%  (129.2/135)</TD></TR><TR><TD CLASS="f"><A HREF="#1">toString (UrlEncodedQueryString$Separator): String</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>91%  (63/69)</TD><TD>87%  (11.2/13)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#2">appendOrSet (CharSequence, boolean): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>92%  (71/77)</TD><TD>92%  (22/24)</TD></TR><TR><TD CLASS="f"><A HREF="#3">apply (URI, UrlEncodedQueryString$Separator): URI</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>95%  (107/113)</TD><TD>93%  (26/28)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#4">&lt;static initializer&gt;</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (11/11)</TD><TD>100% (1/1)</TD></TR><TR><TD CLASS="f"><A HREF="#5">UrlEncodedQueryString (): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (8/8)</TD><TD>100% (3/3)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#6">append (String): UrlEncodedQueryString</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (6/6)</TD><TD>100% (2/2)</TD></TR><TR><TD CLASS="f"><A HREF="#7">append (String, Number): UrlEncodedQueryString</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (8/8)</TD><TD>100% (2/2)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#8">append (String, String): UrlEncodedQueryString</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (7/7)</TD><TD>100% (2/2)</TD></TR><TR><TD CLASS="f"><A HREF="#9">appendOrSet (String, String, boolean): void</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (51/51)</TD><TD>100% (17/17)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#a">apply (URI): URI</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (5/5)</TD><TD>100% (1/1)</TD></TR><TR><TD CLASS="f"><A HREF="#0">create (): UrlEncodedQueryString</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (4/4)</TD><TD>100% (1/1)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#c">create (Map): UrlEncodedQueryString</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (30/30)</TD><TD>100% (4/4)</TD></TR><TR><TD CLASS="f"><A HREF="#d">equals (Object): boolean</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (21/21)</TD><TD>100% (7/7)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#e">get (String): String</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (16/16)</TD><TD>100% (4/4)</TD></TR><TR><TD CLASS="f"><A HREF="#f">getMap (): Map</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (32/32)</TD><TD>100% (6/6)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#10">getNames (): Iterator</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (5/5)</TD><TD>100% (1/1)</TD></TR><TR><TD CLASS="f"><A HREF="#11">getValues (String): List</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (6/6)</TD><TD>100% (1/1)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#12">hashCode (): int</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (4/4)</TD><TD>100% (1/1)</TD></TR><TR><TD CLASS="f"><A HREF="#13">isEmpty (): boolean</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (4/4)</TD><TD>100% (1/1)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#14">parse (CharSequence): UrlEncodedQueryString</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (10/10)</TD><TD>100% (3/3)</TD></TR><TR><TD CLASS="f"><A HREF="#15">parse (URI): UrlEncodedQueryString</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (4/4)</TD><TD>100% (1/1)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#16">remove (String): UrlEncodedQueryString</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (7/7)</TD><TD>100% (2/2)</TD></TR><TR><TD CLASS="f"><A HREF="#17">set (String): UrlEncodedQueryString</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (6/6)</TD><TD>100% (2/2)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#18">set (String, Number): UrlEncodedQueryString</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (16/16)</TD><TD>100% (5/5)</TD></TR><TR><TD CLASS="f"><A HREF="#19">set (String, String): UrlEncodedQueryString</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (7/7)</TD><TD>100% (2/2)</TD></TR><TR CLASS="o"><TD CLASS="f"><A HREF="#1a">toString (): String</A></TD><TD> </TD><TD>100% (1/1)</TD><TD>100% (4/4)</TD><TD>100% (1/1)</TD></TR></TABLE><P></P><TABLE CLASS="s" CELLSPACING="0" WIDTH="100%"><TR><TD CLASS="l">1</TD><TD>// Copyright (c) 2009, Richard Kennard</TD></TR><TR><TD CLASS="l">2</TD><TD>// All rights reserved.</TD></TR><TR><TD CLASS="l">3</TD><TD>//</TD></TR><TR><TD CLASS="l">4</TD><TD>// Redistribution and use in source and binary forms, with or without</TD></TR><TR><TD CLASS="l">5</TD><TD>// modification, are permitted provided that the following conditions are met:</TD></TR><TR><TD CLASS="l">6</TD><TD>// * Redistributions of source code must retain the above copyright</TD></TR><TR><TD CLASS="l">7</TD><TD>// notice, this list of conditions and the following disclaimer.</TD></TR><TR><TD CLASS="l">8</TD><TD>// * Redistributions in binary form must reproduce the above copyright</TD></TR><TR><TD CLASS="l">9</TD><TD>// notice, this list of conditions and the following disclaimer in the</TD></TR><TR><TD CLASS="l">10</TD><TD>// documentation and/or other materials provided with the distribution.</TD></TR><TR><TD CLASS="l">11</TD><TD>// * Neither the name of Richard Kennard nor the</TD></TR><TR><TD CLASS="l">12</TD><TD>// names of its contributors may be used to endorse or promote products</TD></TR><TR><TD CLASS="l">13</TD><TD>// derived from this software without specific prior written permission.</TD></TR><TR><TD CLASS="l">14</TD><TD>//</TD></TR><TR><TD CLASS="l">15</TD><TD>// THIS SOFTWARE IS PROVIDED BY RICHARD KENNARD ''AS IS'' AND ANY</TD></TR><TR><TD CLASS="l">16</TD><TD>// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED</TD></TR><TR><TD CLASS="l">17</TD><TD>// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</TD></TR><TR><TD CLASS="l">18</TD><TD>// DISCLAIMED. IN NO EVENT SHALL RICHARD KENNARD BE LIABLE FOR ANY</TD></TR><TR><TD CLASS="l">19</TD><TD>// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES</TD></TR><TR><TD CLASS="l">20</TD><TD>// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;</TD></TR><TR><TD CLASS="l">21</TD><TD>// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND</TD></TR><TR><TD CLASS="l">22</TD><TD>// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</TD></TR><TR><TD CLASS="l">23</TD><TD>// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS</TD></TR><TR><TD CLASS="l">24</TD><TD>// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</TD></TR><TR><TD CLASS="l">25</TD><TD> </TD></TR><TR><TD CLASS="l">26</TD><TD>package com.kennardconsulting.core.net;</TD></TR><TR><TD CLASS="l">27</TD><TD> </TD></TR><TR><TD CLASS="l">28</TD><TD>import java.io.UnsupportedEncodingException;</TD></TR><TR><TD CLASS="l">29</TD><TD>import java.net.URI;</TD></TR><TR><TD CLASS="l">30</TD><TD>import java.net.URISyntaxException;</TD></TR><TR><TD CLASS="l">31</TD><TD>import java.net.URLDecoder;</TD></TR><TR><TD CLASS="l">32</TD><TD>import java.net.URLEncoder;</TD></TR><TR><TD CLASS="l">33</TD><TD>import java.util.ArrayList;</TD></TR><TR><TD CLASS="l">34</TD><TD>import java.util.HashSet;</TD></TR><TR><TD CLASS="l">35</TD><TD>import java.util.Iterator;</TD></TR><TR><TD CLASS="l">36</TD><TD>import java.util.LinkedHashMap;</TD></TR><TR><TD CLASS="l">37</TD><TD>import java.util.List;</TD></TR><TR><TD CLASS="l">38</TD><TD>import java.util.Map;</TD></TR><TR><TD CLASS="l">39</TD><TD>import java.util.Set;</TD></TR><TR><TD CLASS="l">40</TD><TD>import java.util.StringTokenizer;</TD></TR><TR><TD CLASS="l">41</TD><TD> </TD></TR><TR><TD CLASS="l">42</TD><TD>/**</TD></TR><TR><TD CLASS="l">43</TD><TD> * Represents a www-form-urlencoded query string.</TD></TR><TR><TD CLASS="l">44</TD><TD> * &lt;p&gt;</TD></TR><TR><TD CLASS="l">45</TD><TD> * An instance of this class represents a query string encoded using the</TD></TR><TR><TD CLASS="l">46</TD><TD> * &lt;code&gt;www-form-urlencoded&lt;/code&gt; encoding scheme, as defined by &lt;a</TD></TR><TR><TD CLASS="l">47</TD><TD> * href=&#34;http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4.1&#34;&gt;HTML 4.01 Specification:</TD></TR><TR><TD CLASS="l">48</TD><TD> * application/x-www-form-urlencoded&lt;/a&gt;, and &lt;a</TD></TR><TR><TD CLASS="l">49</TD><TD> * href=&#34;http://www.w3.org/TR/1999/REC-html401-19991224/appendix/notes.html#h-B.2.2&#34;&gt;HTML 4.01</TD></TR><TR><TD CLASS="l">50</TD><TD> * Specification: Ampersands in URI attribute values&lt;/a&gt;. This is a common encoding scheme of the</TD></TR><TR><TD CLASS="l">51</TD><TD> * query component of a URI, though the &lt;a href=&#34;http://www.ietf.org/rfc/rfc2396.txt&#34;&gt;RFC 2396 URI</TD></TR><TR><TD CLASS="l">52</TD><TD> * specification&lt;/a&gt; itself does not define a specific format for the query component.</TD></TR><TR><TD CLASS="l">53</TD><TD> * &lt;p&gt;</TD></TR><TR><TD CLASS="l">54</TD><TD> * This class provides static methods for &lt;a href=&#34;#create()&#34;&gt;creating&lt;/a&gt; UrlEncodedQueryString</TD></TR><TR><TD CLASS="l">55</TD><TD> * instances by &lt;a href=&#34;#parse(java.lang.CharSequence)&#34;&gt;parsing&lt;/a&gt; URI and string forms. It can</TD></TR><TR><TD CLASS="l">56</TD><TD> * then be used to create, retrieve, update and delete parameters, and to re-apply the query string</TD></TR><TR><TD CLASS="l">57</TD><TD> * back to an existing URI.</TD></TR><TR><TD CLASS="l">58</TD><TD> * &lt;p&gt;</TD></TR><TR><TD CLASS="l">59</TD><TD> * &lt;h4&gt;Encoding and decoding&lt;/h4&gt;</TD></TR><TR><TD CLASS="l">60</TD><TD> * UrlEncodedQueryString automatically encodes and decodes parameter names and values to and from</TD></TR><TR><TD CLASS="l">61</TD><TD> * &lt;code&gt;www-form-urlencoded&lt;/code&gt; encoding by using &lt;code&gt;java.net.URLEncoder&lt;/code&gt; and</TD></TR><TR><TD CLASS="l">62</TD><TD> * &lt;code&gt;java.net.URLDecoder&lt;/code&gt;, which follow the &lt;a</TD></TR><TR><TD CLASS="l">63</TD><TD> * href=&#34;http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars&#34;&gt; HTML 4.01 Specification:</TD></TR><TR><TD CLASS="l">64</TD><TD> * Non-ASCII characters in URI attribute values&lt;/a&gt; recommendation.</TD></TR><TR><TD CLASS="l">65</TD><TD> * &lt;h4&gt;Multivalued parameters&lt;/h4&gt;</TD></TR><TR><TD CLASS="l">66</TD><TD> * Often, parameter names are unique across the name/value pairs of a</TD></TR><TR><TD CLASS="l">67</TD><TD> * &lt;code&gt;www-form-urlencoded&lt;/code&gt; query string. However, it is permitted for the same parameter</TD></TR><TR><TD CLASS="l">68</TD><TD> * name to appear in multiple name/value pairs, denoting that a single parameter has multiple</TD></TR><TR><TD CLASS="l">69</TD><TD> * values. This less common use case can lead to ambiguity when adding parameters - is the 'add' a</TD></TR><TR><TD CLASS="l">70</TD><TD> * 'replace' (of an existing parameter, if one with the same name already exists) or an 'append'</TD></TR><TR><TD CLASS="l">71</TD><TD> * (potentially creating a multivalued parameter, if one with the same name already exists)?</TD></TR><TR><TD CLASS="l">72</TD><TD> * &lt;p&gt;</TD></TR><TR><TD CLASS="l">73</TD><TD> * This requirement significantly shapes the &lt;code&gt;UrlEncodedQueryString&lt;/code&gt; API. In particular</TD></TR><TR><TD CLASS="l">74</TD><TD> * there are:</TD></TR><TR><TD CLASS="l">75</TD><TD> * &lt;ul&gt;</TD></TR><TR><TD CLASS="l">76</TD><TD> * &lt;li&gt;&lt;code&gt;set&lt;/code&gt; methods for setting a parameter, potentially replacing an existing value</TD></TR><TR><TD CLASS="l">77</TD><TD> * &lt;li&gt;&lt;code&gt;append&lt;/code&gt; methods for adding a parameter, potentially creating a multivalued</TD></TR><TR><TD CLASS="l">78</TD><TD> * parameter</TD></TR><TR><TD CLASS="l">79</TD><TD> * &lt;li&gt;&lt;code&gt;get&lt;/code&gt; methods for returning a single value, even if the parameter has multiple</TD></TR><TR><TD CLASS="l">80</TD><TD> * values</TD></TR><TR><TD CLASS="l">81</TD><TD> * &lt;li&gt;&lt;code&gt;getValues&lt;/code&gt; methods for returning multiple values</TD></TR><TR><TD CLASS="l">82</TD><TD> * &lt;/ul&gt;</TD></TR><TR><TD CLASS="l">83</TD><TD> * &lt;h4&gt;Retrieving parameters&lt;/h4&gt;</TD></TR><TR><TD CLASS="l">84</TD><TD> * UrlEncodedQueryString can be used to parse and retrieve parameters from a query string by passing</TD></TR><TR><TD CLASS="l">85</TD><TD> * either a URI or a query string to its constructor:</TD></TR><TR><TD CLASS="l">86</TD><TD> * &lt;p&gt;</TD></TR><TR><TD CLASS="l">87</TD><TD> * &lt;code&gt;</TD></TR><TR><TD CLASS="l">88</TD><TD> *                 URI uri = new URI(&#34;http://java.sun.com?forum=2&#34;);&lt;br/&gt;</TD></TR><TR><TD CLASS="l">89</TD><TD> *             UrlEncodedQueryString queryString = UrlEncodedQueryString.parse(uri);&lt;br/&gt;</TD></TR><TR><TD CLASS="l">90</TD><TD> *             System.out.println(queryString.get(&#34;forum&#34;));&lt;br/&gt;</TD></TR><TR><TD CLASS="l">91</TD><TD> * &lt;/code&gt;</TD></TR><TR><TD CLASS="l">92</TD><TD> * &lt;h4&gt;Modifying parameters&lt;/h4&gt;</TD></TR><TR><TD CLASS="l">93</TD><TD> * UrlEncodedQueryString can be used to set, append or remove parameters from a query string:</TD></TR><TR><TD CLASS="l">94</TD><TD> * &lt;p&gt;</TD></TR><TR><TD CLASS="l">95</TD><TD> * &lt;code&gt;</TD></TR><TR><TD CLASS="l">96</TD><TD> *             URI uri = new URI(&#34;/forum/article.jsp?id=2&amp;amp;para=4&#34;);&lt;br/&gt;</TD></TR><TR><TD CLASS="l">97</TD><TD> *             UrlEncodedQueryString queryString = UrlEncodedQueryString.parse(uri);&lt;br/&gt;</TD></TR><TR><TD CLASS="l">98</TD><TD> *             queryString.set(&#34;id&#34;, 3);&lt;br/&gt;</TD></TR><TR><TD CLASS="l">99</TD><TD> *             queryString.remove(&#34;para&#34;);&lt;br/&gt;</TD></TR><TR><TD CLASS="l">100</TD><TD> *             System.out.println(queryString);&lt;br/&gt;</TD></TR><TR><TD CLASS="l">101</TD><TD> * &lt;/code&gt;</TD></TR><TR><TD CLASS="l">102</TD><TD> * &lt;p&gt;</TD></TR><TR><TD CLASS="l">103</TD><TD> * When modifying parameters, the ordering of existing parameters is maintained. Parameters are</TD></TR><TR><TD CLASS="l">104</TD><TD> * &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;removed&lt;/code&gt; in-place, while &lt;code&gt;appended&lt;/code&gt; parameters</TD></TR><TR><TD CLASS="l">105</TD><TD> * are added to the end of the query string.</TD></TR><TR><TD CLASS="l">106</TD><TD> * &lt;h4&gt;Applying the Query&lt;/h4&gt;</TD></TR><TR><TD CLASS="l">107</TD><TD> * UrlEncodedQueryString can be used to apply a modified query string back to a URI, creating a new</TD></TR><TR><TD CLASS="l">108</TD><TD> * URI:</TD></TR><TR><TD CLASS="l">109</TD><TD> * &lt;p&gt;</TD></TR><TR><TD CLASS="l">110</TD><TD> * &lt;code&gt;</TD></TR><TR><TD CLASS="l">111</TD><TD> *             URI uri = new URI(&#34;/forum/article.jsp?id=2&#34;);&lt;br/&gt;</TD></TR><TR><TD CLASS="l">112</TD><TD> *             UrlEncodedQueryString queryString = UrlEncodedQueryString.parse(uri);&lt;br/&gt;</TD></TR><TR><TD CLASS="l">113</TD><TD> *             queryString.set(&#34;id&#34;, 3);&lt;br/&gt;</TD></TR><TR><TD CLASS="l">114</TD><TD> *             uri = queryString.apply(uri);&lt;br/&gt;</TD></TR><TR><TD CLASS="l">115</TD><TD> * &lt;/code&gt;</TD></TR><TR><TD CLASS="l">116</TD><TD> * &lt;p&gt;</TD></TR><TR><TD CLASS="l">117</TD><TD> * When reconstructing query strings, there are two valid separator parameters defined by the W3C</TD></TR><TR><TD CLASS="l">118</TD><TD> * (ampersand &#34;&amp;amp;&#34; and semicolon &#34;;&#34;), with ampersand being the most common. The</TD></TR><TR><TD CLASS="l">119</TD><TD> * &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; methods both default to using an ampersand, with</TD></TR><TR><TD CLASS="l">120</TD><TD> * overloaded forms for using a semicolon.</TD></TR><TR><TD CLASS="l">121</TD><TD> * &lt;h4&gt;Thread Safety&lt;/h4&gt;</TD></TR><TR><TD CLASS="l">122</TD><TD> * This implementation is not synchronized. If multiple threads access a query string concurrently,</TD></TR><TR><TD CLASS="l">123</TD><TD> * and at least one of the threads modifies the query string, it must be synchronized externally.</TD></TR><TR><TD CLASS="l">124</TD><TD> * This is typically accomplished by synchronizing on some object that naturally encapsulates the</TD></TR><TR><TD CLASS="l">125</TD><TD> * query string.</TD></TR><TR><TD CLASS="l">126</TD><TD> *</TD></TR><TR><TD CLASS="l">127</TD><TD> * @author Richard Kennard</TD></TR><TR><TD CLASS="l">128</TD><TD> * @version 1.0</TD></TR><TR><TD CLASS="l">129</TD><TD> */</TD></TR><TR><TD CLASS="l">130</TD><TD> </TD></TR><TR><TD CLASS="l">131</TD><TD>public class UrlEncodedQueryString</TD></TR><TR><TD CLASS="l">132</TD><TD>{</TD></TR><TR><TD CLASS="l">133</TD><TD>        //</TD></TR><TR><TD CLASS="l">134</TD><TD>        // Public statics</TD></TR><TR><TD CLASS="l">135</TD><TD>        //</TD></TR><TR><TD CLASS="l">136</TD><TD> </TD></TR><TR><TD CLASS="l">137</TD><TD>        /**</TD></TR><TR><TD CLASS="l">138</TD><TD>         * Enumeration of recommended www-form-urlencoded separators.</TD></TR><TR><TD CLASS="l">139</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">140</TD><TD>         * Recommended separators are defined by &lt;a</TD></TR><TR><TD CLASS="l">141</TD><TD>         * href=&#34;http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4.1&#34;&gt;HTML 4.01</TD></TR><TR><TD CLASS="l">142</TD><TD>         * Specification: application/x-www-form-urlencoded&lt;/a&gt; and &lt;a</TD></TR><TR><TD CLASS="l">143</TD><TD>         * href=&#34;http://www.w3.org/TR/html401/appendix/notes.html#h-B.2.2&#34;&gt;HTML 4.01 Specification:</TD></TR><TR><TD CLASS="l">144</TD><TD>         * Ampersands in URI attribute values&lt;/a&gt;.</TD></TR><TR><TD CLASS="l">145</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">146</TD><TD>         * &lt;em&gt;All&lt;/em&gt; separators are recognised when parsing query strings. &lt;em&gt;One&lt;/em&gt; separator</TD></TR><TR><TD CLASS="l">147</TD><TD>         * may be passed to &lt;code&gt;toString&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; when outputting query</TD></TR><TR><TD CLASS="l">148</TD><TD>         * strings.</TD></TR><TR><TD CLASS="l">149</TD><TD>         */</TD></TR><TR><TD CLASS="l">150</TD><TD> </TD></TR><TR><TD CLASS="l">151</TD><TD>        public static enum Separator</TD></TR><TR><TD CLASS="l">152</TD><TD>        {</TD></TR><TR><TD CLASS="l">153</TD><TD>                /**</TD></TR><TR><TD CLASS="l">154</TD><TD>                 * An ampersand &lt;code&gt;&amp;amp;&lt;/code&gt; - the separator recommended by &lt;a</TD></TR><TR><TD CLASS="l">155</TD><TD>                 * href=&#34;http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4.1&#34;&gt;HTML 4.01</TD></TR><TR><TD CLASS="l">156</TD><TD>                 * Specification: application/x-www-form-urlencoded&lt;/a&gt;.</TD></TR><TR><TD CLASS="l">157</TD><TD>                 */</TD></TR><TR><TD CLASS="l">158</TD><TD> </TD></TR><TR><TD CLASS="l">159</TD><TD>                AMPERSAND</TD></TR><TR><TD CLASS="l">160</TD><TD>                {</TD></TR><TR><TD CLASS="l">161</TD><TD>                        /**</TD></TR><TR><TD CLASS="l">162</TD><TD>                         * Returns a String representation of this Separator.</TD></TR><TR><TD CLASS="l">163</TD><TD>                         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">164</TD><TD>                         * The String representation matches that defined by the &lt;a</TD></TR><TR><TD CLASS="l">165</TD><TD>                         * href=&#34;http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4.1&#34;&gt;HTML 4.01</TD></TR><TR><TD CLASS="l">166</TD><TD>                         * Specification: application/x-www-form-urlencoded&lt;/a&gt;.</TD></TR><TR><TD CLASS="l">167</TD><TD>                         */</TD></TR><TR><TD CLASS="l">168</TD><TD> </TD></TR><TR><TD CLASS="l">169</TD><TD>                        @Override</TD></TR><TR><TD CLASS="l">170</TD><TD>                        public String toString()</TD></TR><TR><TD CLASS="l">171</TD><TD>                        {</TD></TR><TR><TD CLASS="l">172</TD><TD>                                return &#34;&amp;&#34;;</TD></TR><TR><TD CLASS="l">173</TD><TD>                        }</TD></TR><TR><TD CLASS="l">174</TD><TD>                },</TD></TR><TR><TD CLASS="l">175</TD><TD> </TD></TR><TR><TD CLASS="l">176</TD><TD>                /**</TD></TR><TR><TD CLASS="l">177</TD><TD>                 * A semicolon &lt;code&gt;;&lt;/code&gt; - the separator recommended by &lt;a</TD></TR><TR><TD CLASS="l">178</TD><TD>                 * href=&#34;http://www.w3.org/TR/html401/appendix/notes.html#h-B.2.2&#34;&gt;HTML 4.01 Specification:</TD></TR><TR><TD CLASS="l">179</TD><TD>                 * Ampersands in URI attribute values&lt;/a&gt;.</TD></TR><TR><TD CLASS="l">180</TD><TD>                 */</TD></TR><TR><TD CLASS="l">181</TD><TD> </TD></TR><TR><TD CLASS="l">182</TD><TD>                SEMICOLON</TD></TR><TR><TD CLASS="l">183</TD><TD>                {</TD></TR><TR><TD CLASS="l">184</TD><TD>                        /**</TD></TR><TR><TD CLASS="l">185</TD><TD>                         * Returns a String representation of this Separator.</TD></TR><TR><TD CLASS="l">186</TD><TD>                         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">187</TD><TD>                         * The String representation matches that defined by the &lt;a</TD></TR><TR><TD CLASS="l">188</TD><TD>                         * href=&#34;http://www.w3.org/TR/html401/appendix/notes.html#h-B.2.2&#34;&gt;HTML 4.01</TD></TR><TR><TD CLASS="l">189</TD><TD>                         * Specification: Ampersands in URI attribute values&lt;/a&gt;.</TD></TR><TR><TD CLASS="l">190</TD><TD>                         */</TD></TR><TR><TD CLASS="l">191</TD><TD> </TD></TR><TR><TD CLASS="l">192</TD><TD>                        @Override</TD></TR><TR><TD CLASS="l">193</TD><TD>                        public String toString()</TD></TR><TR><TD CLASS="l">194</TD><TD>                        {</TD></TR><TR><TD CLASS="l">195</TD><TD>                                return &#34;;&#34;;</TD></TR><TR><TD CLASS="l">196</TD><TD>                        }</TD></TR><TR><TD CLASS="l">197</TD><TD>                };</TD></TR><TR><TD CLASS="l">198</TD><TD>        }</TD></TR><TR><TD CLASS="l">199</TD><TD> </TD></TR><TR><TD CLASS="l">200</TD><TD>        /**</TD></TR><TR><TD CLASS="l">201</TD><TD>         * Creates an empty UrlEncodedQueryString.</TD></TR><TR><TD CLASS="l">202</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">203</TD><TD>         * Calling &lt;code&gt;toString()&lt;/code&gt; on the created instance will return an empty String.</TD></TR><TR><TD CLASS="l"><A NAME="0">204</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">205</TD><TD> </TD></TR><TR><TD CLASS="l">206</TD><TD>        public static UrlEncodedQueryString create()</TD></TR><TR><TD CLASS="l">207</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">208</TD><TD>                return new UrlEncodedQueryString();</TD></TR><TR><TD CLASS="l">209</TD><TD>        }</TD></TR><TR><TD CLASS="l">210</TD><TD> </TD></TR><TR><TD CLASS="l">211</TD><TD>        /**</TD></TR><TR><TD CLASS="l">212</TD><TD>         * Creates a UrlEncodedQueryString from the given Map.</TD></TR><TR><TD CLASS="l">213</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">214</TD><TD>         * The order the parameters are created in corresponds to the iteration order of the Map.</TD></TR><TR><TD CLASS="l">215</TD><TD>         *</TD></TR><TR><TD CLASS="l">216</TD><TD>         * @param parameterMap</TD></TR><TR><TD CLASS="l">217</TD><TD>         *            &lt;code&gt;Map&lt;/code&gt; containing parameter names and values.</TD></TR><TR><TD CLASS="l"><A NAME="c">218</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">219</TD><TD> </TD></TR><TR><TD CLASS="l">220</TD><TD>        public static UrlEncodedQueryString create( Map&lt;String, List&lt;String&gt;&gt; parameterMap )</TD></TR><TR><TD CLASS="l">221</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">222</TD><TD>                UrlEncodedQueryString queryString = new UrlEncodedQueryString();</TD></TR><TR><TD CLASS="l">223</TD><TD> </TD></TR><TR><TD CLASS="l">224</TD><TD>                // Defensively copy the List&lt;String&gt;'s</TD></TR><TR><TD CLASS="l">225</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">226</TD><TD>                for ( Map.Entry&lt;String, List&lt;String&gt;&gt; entry : parameterMap.entrySet() )</TD></TR><TR><TD CLASS="l">227</TD><TD>                {</TD></TR><TR CLASS="c"><TD CLASS="l">228</TD><TD>                        queryString.queryMap.put( entry.getKey(), new ArrayList&lt;String&gt;( entry.getValue() ) );</TD></TR><TR><TD CLASS="l">229</TD><TD>                }</TD></TR><TR><TD CLASS="l">230</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">231</TD><TD>                return queryString;</TD></TR><TR><TD CLASS="l">232</TD><TD>        }</TD></TR><TR><TD CLASS="l">233</TD><TD> </TD></TR><TR><TD CLASS="l">234</TD><TD>        /**</TD></TR><TR><TD CLASS="l">235</TD><TD>         * Creates a UrlEncodedQueryString by parsing the given query string.</TD></TR><TR><TD CLASS="l">236</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">237</TD><TD>         * This method assumes the given string is the &lt;code&gt;www-form-urlencoded&lt;/code&gt; query</TD></TR><TR><TD CLASS="l">238</TD><TD>         * component of a URI. When parsing, all &lt;a</TD></TR><TR><TD CLASS="l">239</TD><TD>         * href=&#34;UrlEncodedQueryString.Separator.html&#34;&gt;Separators&lt;/a&gt; are recognised.</TD></TR><TR><TD CLASS="l">240</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">241</TD><TD>         * The result of calling this method with a string that is not &lt;code&gt;www-form-urlencoded&lt;/code&gt;</TD></TR><TR><TD CLASS="l">242</TD><TD>         * (eg. passing an entire URI, not just its query string) will likely be mismatched parameter</TD></TR><TR><TD CLASS="l">243</TD><TD>         * names.</TD></TR><TR><TD CLASS="l">244</TD><TD>         *</TD></TR><TR><TD CLASS="l">245</TD><TD>         * @param query</TD></TR><TR><TD CLASS="l">246</TD><TD>         *            query string to be parsed</TD></TR><TR><TD CLASS="l"><A NAME="14">247</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">248</TD><TD> </TD></TR><TR><TD CLASS="l">249</TD><TD>        public static UrlEncodedQueryString parse( final CharSequence query )</TD></TR><TR><TD CLASS="l">250</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">251</TD><TD>                UrlEncodedQueryString queryString = new UrlEncodedQueryString();</TD></TR><TR><TD CLASS="l">252</TD><TD> </TD></TR><TR><TD CLASS="l">253</TD><TD>                // Note: import to call appendOrSet with 'true', in</TD></TR><TR><TD CLASS="l">254</TD><TD>                // case the given query contains multi-valued parameters</TD></TR><TR><TD CLASS="l">255</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">256</TD><TD>                queryString.appendOrSet( query, true );</TD></TR><TR><TD CLASS="l">257</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">258</TD><TD>                return queryString;</TD></TR><TR><TD CLASS="l">259</TD><TD>        }</TD></TR><TR><TD CLASS="l">260</TD><TD> </TD></TR><TR><TD CLASS="l">261</TD><TD>        /**</TD></TR><TR><TD CLASS="l">262</TD><TD>         * Creates a UrlEncodedQueryString by extracting and parsing the query component from the given</TD></TR><TR><TD CLASS="l">263</TD><TD>         * URI.</TD></TR><TR><TD CLASS="l">264</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">265</TD><TD>         * This method assumes the query component is &lt;code&gt;www-form-urlencoded&lt;/code&gt;. When parsing,</TD></TR><TR><TD CLASS="l">266</TD><TD>         * all separators from the Separators enum are recognised.</TD></TR><TR><TD CLASS="l">267</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">268</TD><TD>         * The result of calling this method with a query component that is not</TD></TR><TR><TD CLASS="l">269</TD><TD>         * &lt;code&gt;www-form-urlencoded&lt;/code&gt; will likely be mismatched parameter names.</TD></TR><TR><TD CLASS="l">270</TD><TD>         *</TD></TR><TR><TD CLASS="l">271</TD><TD>         * @param uri</TD></TR><TR><TD CLASS="l">272</TD><TD>         *            URI to be parsed</TD></TR><TR><TD CLASS="l">273</TD><TD>         */</TD></TR><TR><TD CLASS="l">274</TD><TD> </TD></TR><TR><TD CLASS="l">275</TD><TD>        public static UrlEncodedQueryString parse( final URI uri )</TD></TR><TR><TD CLASS="l"><A NAME="15">276</A></TD><TD>        {</TD></TR><TR><TD CLASS="l">277</TD><TD>                // Note: use uri.getRawQuery, not uri.getQuery, in case the</TD></TR><TR><TD CLASS="l">278</TD><TD>                // query parameters contain encoded ampersands (%26)</TD></TR><TR><TD CLASS="l">279</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">280</TD><TD>                return parse( uri.getRawQuery() );</TD></TR><TR><TD CLASS="l">281</TD><TD>        }</TD></TR><TR><TD CLASS="l">282</TD><TD> </TD></TR><TR><TD CLASS="l">283</TD><TD>        //</TD></TR><TR><TD CLASS="l">284</TD><TD>        // Private statics</TD></TR><TR><TD CLASS="l">285</TD><TD>        //</TD></TR><TR><TD CLASS="l">286</TD><TD> </TD></TR><TR><TD CLASS="l">287</TD><TD>        /**</TD></TR><TR><TD CLASS="l">288</TD><TD>         * Separators to honour when parsing query strings.</TD></TR><TR><TD CLASS="l">289</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l"><A NAME="4">290</A></TD><TD>         * &lt;em&gt;All&lt;/em&gt; Separators are recognized when parsing parameters, regardless of what the user</TD></TR><TR><TD CLASS="l">291</TD><TD>         * later nominates as their &lt;code&gt;toString&lt;/code&gt; output parameter.</TD></TR><TR><TD CLASS="l">292</TD><TD>         */</TD></TR><TR><TD CLASS="l">293</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">294</TD><TD>        private final static String                                PARSE_PARAMETER_SEPARATORS        = String.valueOf( Separator.AMPERSAND ) + Separator.SEMICOLON;</TD></TR><TR><TD CLASS="l">295</TD><TD> </TD></TR><TR><TD CLASS="l">296</TD><TD>        //</TD></TR><TR><TD CLASS="l">297</TD><TD>        // Private members</TD></TR><TR><TD CLASS="l">298</TD><TD>        //</TD></TR><TR><TD CLASS="l">299</TD><TD> </TD></TR><TR><TD CLASS="l">300</TD><TD>        /**</TD></TR><TR><TD CLASS="l">301</TD><TD>         * Map of query parameters.</TD></TR><TR><TD CLASS="l">302</TD><TD>         */</TD></TR><TR><TD CLASS="l">303</TD><TD> </TD></TR><TR><TD CLASS="l">304</TD><TD>        // Note: we initialize this Map upon object creation because, realistically, it</TD></TR><TR><TD CLASS="l">305</TD><TD>        // is always going to be needed (eg. there is little point lazy-initializing it)</TD></TR><TR CLASS="c"><TD CLASS="l">306</TD><TD>        private final Map&lt;String, List&lt;String&gt;&gt;        queryMap                                        = new LinkedHashMap&lt;String, List&lt;String&gt;&gt;();</TD></TR><TR><TD CLASS="l">307</TD><TD> </TD></TR><TR><TD CLASS="l">308</TD><TD>        //</TD></TR><TR><TD CLASS="l">309</TD><TD>        // Public methods</TD></TR><TR><TD CLASS="l">310</TD><TD>        //</TD></TR><TR><TD CLASS="l">311</TD><TD> </TD></TR><TR><TD CLASS="l">312</TD><TD>        /**</TD></TR><TR><TD CLASS="l">313</TD><TD>         * Returns the value of the named parameter as a String, or &lt;code&gt;null&lt;/code&gt; if the parameter</TD></TR><TR><TD CLASS="l">314</TD><TD>         * does not exist.</TD></TR><TR><TD CLASS="l">315</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">316</TD><TD>         * You should only use this method when you are sure the parameter has only one value. If the</TD></TR><TR><TD CLASS="l">317</TD><TD>         * parameter might have more than one value, use &lt;a</TD></TR><TR><TD CLASS="l">318</TD><TD>         * href=&#34;#getValues(java.lang.String)&#34;&gt;getValues&lt;/a&gt;.</TD></TR><TR><TD CLASS="l">319</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">320</TD><TD>         * If you use this method with a multivalued parameter, the value returned is equal to the first</TD></TR><TR><TD CLASS="l">321</TD><TD>         * value in the List returned by &lt;a href=&#34;#getValues(java.lang.String)&#34;&gt;getValues&lt;/a&gt;.</TD></TR><TR><TD CLASS="l">322</TD><TD>         *</TD></TR><TR><TD CLASS="l">323</TD><TD>         * @param name</TD></TR><TR><TD CLASS="l">324</TD><TD>         *            &lt;code&gt;String&lt;/code&gt; specifying the name of the parameter</TD></TR><TR><TD CLASS="l">325</TD><TD>         * @return &lt;code&gt;String&lt;/code&gt; representing the single value of the parameter, or</TD></TR><TR><TD CLASS="l">326</TD><TD>         *         &lt;code&gt;null&lt;/code&gt; if the parameter does not exist</TD></TR><TR><TD CLASS="l"><A NAME="e">327</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">328</TD><TD> </TD></TR><TR><TD CLASS="l">329</TD><TD>        public String get( final String name )</TD></TR><TR><TD CLASS="l">330</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">331</TD><TD>                List&lt;String&gt; parameters = getValues( name );</TD></TR><TR><TD CLASS="l">332</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">333</TD><TD>                if ( parameters == null || parameters.isEmpty() )</TD></TR><TR CLASS="c"><TD CLASS="l">334</TD><TD>                        return null;</TD></TR><TR><TD CLASS="l">335</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">336</TD><TD>                return parameters.get( 0 );</TD></TR><TR><TD CLASS="l">337</TD><TD>        }</TD></TR><TR><TD CLASS="l">338</TD><TD> </TD></TR><TR><TD CLASS="l">339</TD><TD>        /**</TD></TR><TR><TD CLASS="l">340</TD><TD>         * Returns an &lt;code&gt;Iterator&lt;/code&gt; of &lt;code&gt;String&lt;/code&gt; objects containing the names of</TD></TR><TR><TD CLASS="l">341</TD><TD>         * the parameters. If there are no parameters, the method returns an empty Iterator. For names</TD></TR><TR><TD CLASS="l">342</TD><TD>         * with multiple values, only one copy of the name is returned.</TD></TR><TR><TD CLASS="l">343</TD><TD>         *</TD></TR><TR><TD CLASS="l">344</TD><TD>         * @return an &lt;code&gt;Iterator&lt;/code&gt; of &lt;code&gt;String&lt;/code&gt; objects, each String containing</TD></TR><TR><TD CLASS="l">345</TD><TD>         *         the name of a parameter; or an empty Iterator if there are no parameters</TD></TR><TR><TD CLASS="l"><A NAME="10">346</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">347</TD><TD> </TD></TR><TR><TD CLASS="l">348</TD><TD>        public Iterator&lt;String&gt; getNames()</TD></TR><TR><TD CLASS="l">349</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">350</TD><TD>                return this.queryMap.keySet().iterator();</TD></TR><TR><TD CLASS="l">351</TD><TD>        }</TD></TR><TR><TD CLASS="l">352</TD><TD> </TD></TR><TR><TD CLASS="l">353</TD><TD>        /**</TD></TR><TR><TD CLASS="l">354</TD><TD>         * Returns a List of &lt;code&gt;String&lt;/code&gt; objects containing all of the values the named</TD></TR><TR><TD CLASS="l">355</TD><TD>         * parameter has, or &lt;code&gt;null&lt;/code&gt; if the parameter does not exist.</TD></TR><TR><TD CLASS="l">356</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">357</TD><TD>         * If the parameter has a single value, the List has a size of 1.</TD></TR><TR><TD CLASS="l">358</TD><TD>         *</TD></TR><TR><TD CLASS="l">359</TD><TD>         * @param name</TD></TR><TR><TD CLASS="l">360</TD><TD>         *            name of the parameter to retrieve</TD></TR><TR><TD CLASS="l">361</TD><TD>         * @return a List of String objects containing the parameter's values, or &lt;code&gt;null&lt;/code&gt; if</TD></TR><TR><TD CLASS="l">362</TD><TD>         *         the paramater does not exist</TD></TR><TR><TD CLASS="l"><A NAME="11">363</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">364</TD><TD> </TD></TR><TR><TD CLASS="l">365</TD><TD>        public List&lt;String&gt; getValues( final String name )</TD></TR><TR><TD CLASS="l">366</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">367</TD><TD>                return this.queryMap.get( name );</TD></TR><TR><TD CLASS="l">368</TD><TD>        }</TD></TR><TR><TD CLASS="l">369</TD><TD> </TD></TR><TR><TD CLASS="l">370</TD><TD>        /**</TD></TR><TR><TD CLASS="l">371</TD><TD>         * Returns a mutable &lt;code&gt;Map&lt;/code&gt; of the query parameters.</TD></TR><TR><TD CLASS="l">372</TD><TD>         *</TD></TR><TR><TD CLASS="l">373</TD><TD>         * @return &lt;code&gt;Map&lt;/code&gt; containing parameter names as keys and parameter values as map</TD></TR><TR><TD CLASS="l">374</TD><TD>         *         values. The keys in the parameter map are of type &lt;code&gt;String&lt;/code&gt;. The values</TD></TR><TR><TD CLASS="l">375</TD><TD>         *         in the parameter map are Lists of type &lt;code&gt;String&lt;/code&gt;, and their ordering is</TD></TR><TR><TD CLASS="l">376</TD><TD>         *         consistent with their ordering in the query string. Will never return</TD></TR><TR><TD CLASS="l">377</TD><TD>         *         &lt;code&gt;null&lt;/code&gt;.</TD></TR><TR><TD CLASS="l"><A NAME="f">378</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">379</TD><TD> </TD></TR><TR><TD CLASS="l">380</TD><TD>        public Map&lt;String, List&lt;String&gt;&gt; getMap()</TD></TR><TR><TD CLASS="l">381</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">382</TD><TD>                LinkedHashMap&lt;String, List&lt;String&gt;&gt; map = new LinkedHashMap&lt;String, List&lt;String&gt;&gt;();</TD></TR><TR><TD CLASS="l">383</TD><TD> </TD></TR><TR><TD CLASS="l">384</TD><TD>                // Defensively copy the List&lt;String&gt;'s</TD></TR><TR><TD CLASS="l">385</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">386</TD><TD>                for ( Map.Entry&lt;String, List&lt;String&gt;&gt; entry : this.queryMap.entrySet() )</TD></TR><TR><TD CLASS="l">387</TD><TD>                {</TD></TR><TR CLASS="c"><TD CLASS="l">388</TD><TD>                        List&lt;String&gt; listValues = entry.getValue();</TD></TR><TR CLASS="c"><TD CLASS="l">389</TD><TD>                        map.put( entry.getKey(), new ArrayList&lt;String&gt;( listValues ) );</TD></TR><TR CLASS="c"><TD CLASS="l">390</TD><TD>                }</TD></TR><TR><TD CLASS="l">391</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">392</TD><TD>                return map;</TD></TR><TR><TD CLASS="l">393</TD><TD>        }</TD></TR><TR><TD CLASS="l">394</TD><TD> </TD></TR><TR><TD CLASS="l">395</TD><TD>        /**</TD></TR><TR><TD CLASS="l">396</TD><TD>         * Sets a query parameter.</TD></TR><TR><TD CLASS="l">397</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">398</TD><TD>         * If one or more parameters with this name already exist, they will be replaced with a single</TD></TR><TR><TD CLASS="l">399</TD><TD>         * parameter with the given value. If no such parameters exist, one will be added.</TD></TR><TR><TD CLASS="l">400</TD><TD>         *</TD></TR><TR><TD CLASS="l">401</TD><TD>         * @param name</TD></TR><TR><TD CLASS="l">402</TD><TD>         *            name of the query parameter</TD></TR><TR><TD CLASS="l">403</TD><TD>         * @param value</TD></TR><TR><TD CLASS="l">404</TD><TD>         *            value of the query parameter. If &lt;code&gt;null&lt;/code&gt;, the parameter is removed</TD></TR><TR><TD CLASS="l">405</TD><TD>         * @return a reference to this object</TD></TR><TR><TD CLASS="l"><A NAME="19">406</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">407</TD><TD> </TD></TR><TR><TD CLASS="l">408</TD><TD>        public UrlEncodedQueryString set( final String name, final String value )</TD></TR><TR><TD CLASS="l">409</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">410</TD><TD>                appendOrSet( name, value, false );</TD></TR><TR CLASS="c"><TD CLASS="l">411</TD><TD>                return this;</TD></TR><TR><TD CLASS="l">412</TD><TD>        }</TD></TR><TR><TD CLASS="l">413</TD><TD> </TD></TR><TR><TD CLASS="l">414</TD><TD>        /**</TD></TR><TR><TD CLASS="l">415</TD><TD>         * Sets a query parameter.</TD></TR><TR><TD CLASS="l">416</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">417</TD><TD>         * If one or more parameters with this name already exist, they will be replaced with a single</TD></TR><TR><TD CLASS="l">418</TD><TD>         * parameter with the given value. If no such parameters exist, one will be added.</TD></TR><TR><TD CLASS="l">419</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">420</TD><TD>         * This version of &lt;code&gt;set&lt;/code&gt; accepts a &lt;code&gt;Number&lt;/code&gt; suitable for auto-boxing.</TD></TR><TR><TD CLASS="l">421</TD><TD>         * For example:</TD></TR><TR><TD CLASS="l">422</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">423</TD><TD>         * &lt;code&gt;</TD></TR><TR><TD CLASS="l">424</TD><TD>         *         queryString.set( &#34;id&#34;, 3 );&lt;br/&gt;</TD></TR><TR><TD CLASS="l">425</TD><TD>         * &lt;/code&gt;</TD></TR><TR><TD CLASS="l">426</TD><TD>         *</TD></TR><TR><TD CLASS="l">427</TD><TD>         * @param name</TD></TR><TR><TD CLASS="l">428</TD><TD>         *            name of the query parameter</TD></TR><TR><TD CLASS="l">429</TD><TD>         * @param value</TD></TR><TR><TD CLASS="l">430</TD><TD>         *            value of the query parameter. If &lt;code&gt;null&lt;/code&gt;, the parameter is removed</TD></TR><TR><TD CLASS="l">431</TD><TD>         * @return a reference to this object</TD></TR><TR><TD CLASS="l"><A NAME="18">432</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">433</TD><TD> </TD></TR><TR><TD CLASS="l">434</TD><TD>        public UrlEncodedQueryString set( final String name, final Number value )</TD></TR><TR><TD CLASS="l">435</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">436</TD><TD>                if ( value == null )</TD></TR><TR><TD CLASS="l">437</TD><TD>                {</TD></TR><TR CLASS="c"><TD CLASS="l">438</TD><TD>                        remove( name );</TD></TR><TR CLASS="c"><TD CLASS="l">439</TD><TD>                        return this;</TD></TR><TR><TD CLASS="l">440</TD><TD>                }</TD></TR><TR><TD CLASS="l">441</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">442</TD><TD>                appendOrSet( name, value.toString(), false );</TD></TR><TR CLASS="c"><TD CLASS="l">443</TD><TD>                return this;</TD></TR><TR><TD CLASS="l">444</TD><TD>        }</TD></TR><TR><TD CLASS="l">445</TD><TD> </TD></TR><TR><TD CLASS="l">446</TD><TD>        /**</TD></TR><TR><TD CLASS="l">447</TD><TD>         * Sets query parameters from a &lt;code&gt;www-form-urlencoded&lt;/code&gt; string.</TD></TR><TR><TD CLASS="l">448</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">449</TD><TD>         * The given string is assumed to be in &lt;code&gt;www-form-urlencoded&lt;/code&gt; format. The result of</TD></TR><TR><TD CLASS="l">450</TD><TD>         * passing a string not in &lt;code&gt;www-form-urlencoded&lt;/code&gt; format (eg. passing an entire URI,</TD></TR><TR><TD CLASS="l">451</TD><TD>         * not just its query string) will likely be mismatched parameter names.</TD></TR><TR><TD CLASS="l">452</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">453</TD><TD>         * The given string is parsed into named parameters, and each is added to the existing</TD></TR><TR><TD CLASS="l">454</TD><TD>         * parameters. If a parameter with the same name already exists, it is replaced with a single</TD></TR><TR><TD CLASS="l">455</TD><TD>         * parameter with the given value. If the same parameter name appears more than once in the</TD></TR><TR><TD CLASS="l">456</TD><TD>         * given string, it is stored as a multivalued parameter. When parsing, all &lt;a</TD></TR><TR><TD CLASS="l">457</TD><TD>         * href=&#34;UrlEncodedQueryString.Separator.html&#34;&gt;Separators&lt;/a&gt; are recognised.</TD></TR><TR><TD CLASS="l">458</TD><TD>         *</TD></TR><TR><TD CLASS="l">459</TD><TD>         * @param query</TD></TR><TR><TD CLASS="l">460</TD><TD>         *            &lt;code&gt;www-form-urlencoded&lt;/code&gt; string. If &lt;code&gt;null&lt;/code&gt;, does nothing</TD></TR><TR><TD CLASS="l">461</TD><TD>         * @return a reference to this object</TD></TR><TR><TD CLASS="l"><A NAME="17">462</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">463</TD><TD> </TD></TR><TR><TD CLASS="l">464</TD><TD>        public UrlEncodedQueryString set( final String query )</TD></TR><TR><TD CLASS="l">465</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">466</TD><TD>                appendOrSet( query, false );</TD></TR><TR CLASS="c"><TD CLASS="l">467</TD><TD>                return this;</TD></TR><TR><TD CLASS="l">468</TD><TD>        }</TD></TR><TR><TD CLASS="l">469</TD><TD> </TD></TR><TR><TD CLASS="l">470</TD><TD>        /**</TD></TR><TR><TD CLASS="l">471</TD><TD>         * Appends a query parameter.</TD></TR><TR><TD CLASS="l">472</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">473</TD><TD>         * If one or more parameters with this name already exist, their value will be preserved and the</TD></TR><TR><TD CLASS="l">474</TD><TD>         * given value will be stored as a multivalued parameter. If no such parameters exist, one will</TD></TR><TR><TD CLASS="l">475</TD><TD>         * be added.</TD></TR><TR><TD CLASS="l">476</TD><TD>         *</TD></TR><TR><TD CLASS="l">477</TD><TD>         * @param name</TD></TR><TR><TD CLASS="l">478</TD><TD>         *            name of the query parameter</TD></TR><TR><TD CLASS="l">479</TD><TD>         * @param value</TD></TR><TR><TD CLASS="l">480</TD><TD>         *            value of the query parameter. If &lt;code&gt;null&lt;/code&gt;, does nothing</TD></TR><TR><TD CLASS="l">481</TD><TD>         * @return a reference to this object</TD></TR><TR><TD CLASS="l"><A NAME="8">482</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">483</TD><TD> </TD></TR><TR><TD CLASS="l">484</TD><TD>        public UrlEncodedQueryString append( final String name, final String value )</TD></TR><TR><TD CLASS="l">485</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">486</TD><TD>                appendOrSet( name, value, true );</TD></TR><TR CLASS="c"><TD CLASS="l">487</TD><TD>                return this;</TD></TR><TR><TD CLASS="l">488</TD><TD>        }</TD></TR><TR><TD CLASS="l">489</TD><TD> </TD></TR><TR><TD CLASS="l">490</TD><TD>        /**</TD></TR><TR><TD CLASS="l">491</TD><TD>         * Appends a query parameter.</TD></TR><TR><TD CLASS="l">492</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">493</TD><TD>         * If one or more parameters with this name already exist, their value will be preserved and the</TD></TR><TR><TD CLASS="l">494</TD><TD>         * given value will be stored as a multivalued parameter. If no such parameters exist, one will</TD></TR><TR><TD CLASS="l">495</TD><TD>         * be added.</TD></TR><TR><TD CLASS="l">496</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">497</TD><TD>         * This version of &lt;code&gt;append&lt;/code&gt; accepts a &lt;code&gt;Number&lt;/code&gt; suitable for</TD></TR><TR><TD CLASS="l">498</TD><TD>         * auto-boxing. For example:</TD></TR><TR><TD CLASS="l">499</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">500</TD><TD>         * &lt;code&gt;</TD></TR><TR><TD CLASS="l">501</TD><TD>         *         queryString.append( &#34;id&#34;, 3 );&lt;br/&gt;</TD></TR><TR><TD CLASS="l">502</TD><TD>         * &lt;/code&gt;</TD></TR><TR><TD CLASS="l">503</TD><TD>         *</TD></TR><TR><TD CLASS="l">504</TD><TD>         * @param name</TD></TR><TR><TD CLASS="l">505</TD><TD>         *            name of the query parameter</TD></TR><TR><TD CLASS="l">506</TD><TD>         * @param value</TD></TR><TR><TD CLASS="l">507</TD><TD>         *            value of the query parameter. If &lt;code&gt;null&lt;/code&gt;, does nothing</TD></TR><TR><TD CLASS="l">508</TD><TD>         * @return a reference to this object</TD></TR><TR><TD CLASS="l"><A NAME="7">509</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">510</TD><TD> </TD></TR><TR><TD CLASS="l">511</TD><TD>        public UrlEncodedQueryString append( final String name, final Number value )</TD></TR><TR><TD CLASS="l">512</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">513</TD><TD>                appendOrSet( name, value.toString(), true );</TD></TR><TR CLASS="c"><TD CLASS="l">514</TD><TD>                return this;</TD></TR><TR><TD CLASS="l">515</TD><TD>        }</TD></TR><TR><TD CLASS="l">516</TD><TD> </TD></TR><TR><TD CLASS="l">517</TD><TD>        /**</TD></TR><TR><TD CLASS="l">518</TD><TD>         * Appends query parameters from a &lt;code&gt;www-form-urlencoded&lt;/code&gt; string.</TD></TR><TR><TD CLASS="l">519</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">520</TD><TD>         * The given string is assumed to be in &lt;code&gt;www-form-urlencoded&lt;/code&gt; format. The result of</TD></TR><TR><TD CLASS="l">521</TD><TD>         * passing a string not in &lt;code&gt;www-form-urlencoded&lt;/code&gt; format (eg. passing an entire URI,</TD></TR><TR><TD CLASS="l">522</TD><TD>         * not just its query string) will likely be mismatched parameter names.</TD></TR><TR><TD CLASS="l">523</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">524</TD><TD>         * The given string is parsed into named parameters, and appended to the existing parameters. If</TD></TR><TR><TD CLASS="l">525</TD><TD>         * a parameter with the same name already exists, or if the same parameter name appears more</TD></TR><TR><TD CLASS="l">526</TD><TD>         * than once in the given string, it is stored as a multivalued parameter. When parsing, all &lt;a</TD></TR><TR><TD CLASS="l">527</TD><TD>         * href=&#34;UrlEncodedQueryString.Separator.html&#34;&gt;Separators&lt;/a&gt; are recognised.</TD></TR><TR><TD CLASS="l">528</TD><TD>         *</TD></TR><TR><TD CLASS="l">529</TD><TD>         * @param query</TD></TR><TR><TD CLASS="l">530</TD><TD>         *            &lt;code&gt;www-form-urlencoded&lt;/code&gt; string. If &lt;code&gt;null&lt;/code&gt;, does nothing</TD></TR><TR><TD CLASS="l">531</TD><TD>         * @return a reference to this object</TD></TR><TR><TD CLASS="l"><A NAME="6">532</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">533</TD><TD> </TD></TR><TR><TD CLASS="l">534</TD><TD>        public UrlEncodedQueryString append( final String query )</TD></TR><TR><TD CLASS="l">535</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">536</TD><TD>                appendOrSet( query, true );</TD></TR><TR CLASS="c"><TD CLASS="l">537</TD><TD>                return this;</TD></TR><TR><TD CLASS="l">538</TD><TD>        }</TD></TR><TR><TD CLASS="l">539</TD><TD> </TD></TR><TR><TD CLASS="l">540</TD><TD>        /**</TD></TR><TR><TD CLASS="l">541</TD><TD>         * Returns whether the query string is empty.</TD></TR><TR><TD CLASS="l">542</TD><TD>         *</TD></TR><TR><TD CLASS="l">543</TD><TD>         * @return true if the query string has no parameters</TD></TR><TR><TD CLASS="l"><A NAME="13">544</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">545</TD><TD> </TD></TR><TR><TD CLASS="l">546</TD><TD>        public boolean isEmpty()</TD></TR><TR><TD CLASS="l">547</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">548</TD><TD>                return queryMap.isEmpty();</TD></TR><TR><TD CLASS="l">549</TD><TD>        }</TD></TR><TR><TD CLASS="l">550</TD><TD> </TD></TR><TR><TD CLASS="l">551</TD><TD>        /**</TD></TR><TR><TD CLASS="l">552</TD><TD>         * Removes the named query parameter.</TD></TR><TR><TD CLASS="l">553</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">554</TD><TD>         * If the parameter has multiple values, all its values are removed.</TD></TR><TR><TD CLASS="l">555</TD><TD>         *</TD></TR><TR><TD CLASS="l">556</TD><TD>         * @param name</TD></TR><TR><TD CLASS="l">557</TD><TD>         *            name of the parameter to remove</TD></TR><TR><TD CLASS="l">558</TD><TD>         * @return a reference to this object</TD></TR><TR><TD CLASS="l"><A NAME="16">559</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">560</TD><TD> </TD></TR><TR><TD CLASS="l">561</TD><TD>        public UrlEncodedQueryString remove( final String name )</TD></TR><TR><TD CLASS="l">562</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">563</TD><TD>                appendOrSet( name, null, false );</TD></TR><TR CLASS="c"><TD CLASS="l">564</TD><TD>                return this;</TD></TR><TR><TD CLASS="l">565</TD><TD>        }</TD></TR><TR><TD CLASS="l">566</TD><TD> </TD></TR><TR><TD CLASS="l">567</TD><TD>        /**</TD></TR><TR><TD CLASS="l">568</TD><TD>         * Applies the query string to the given URI.</TD></TR><TR><TD CLASS="l">569</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">570</TD><TD>         * A copy of the given URI is taken and its existing query string, if there is one, is replaced.</TD></TR><TR><TD CLASS="l">571</TD><TD>         * The query string parameters are separated by &lt;code&gt;Separator.Ampersand&lt;/code&gt;.</TD></TR><TR><TD CLASS="l">572</TD><TD>         *</TD></TR><TR><TD CLASS="l">573</TD><TD>         * @param uri</TD></TR><TR><TD CLASS="l">574</TD><TD>         *            URI to copy and update</TD></TR><TR><TD CLASS="l">575</TD><TD>         * @return a copy of the given URI, with an updated query string</TD></TR><TR><TD CLASS="l"><A NAME="a">576</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">577</TD><TD> </TD></TR><TR><TD CLASS="l">578</TD><TD>        public URI apply( URI uri )</TD></TR><TR><TD CLASS="l">579</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">580</TD><TD>                return apply( uri, Separator.AMPERSAND );</TD></TR><TR><TD CLASS="l">581</TD><TD>        }</TD></TR><TR><TD CLASS="l">582</TD><TD> </TD></TR><TR><TD CLASS="l">583</TD><TD>        /**</TD></TR><TR><TD CLASS="l">584</TD><TD>         * Applies the query string to the given URI, using the given separator between parameters.</TD></TR><TR><TD CLASS="l">585</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">586</TD><TD>         * A copy of the given URI is taken and its existing query string, if there is one, is replaced.</TD></TR><TR><TD CLASS="l">587</TD><TD>         * The query string parameters are separated using the given &lt;code&gt;Separator&lt;/code&gt;.</TD></TR><TR><TD CLASS="l">588</TD><TD>         *</TD></TR><TR><TD CLASS="l">589</TD><TD>         * @param uri</TD></TR><TR><TD CLASS="l">590</TD><TD>         *            URI to copy and update</TD></TR><TR><TD CLASS="l">591</TD><TD>         * @param separator</TD></TR><TR><TD CLASS="l">592</TD><TD>         *            separator to use between parameters</TD></TR><TR><TD CLASS="l">593</TD><TD>         * @return a copy of the given URI, with an updated query string</TD></TR><TR><TD CLASS="l">594</TD><TD>         */</TD></TR><TR><TD CLASS="l">595</TD><TD> </TD></TR><TR><TD CLASS="l">596</TD><TD>        public URI apply( URI uri, Separator separator )</TD></TR><TR><TD CLASS="l">597</TD><TD>        {</TD></TR><TR><TD CLASS="l">598</TD><TD>                // Note this code is essentially a copy of 'java.net.URI.defineString',</TD></TR><TR><TD CLASS="l"><A NAME="3">599</A></TD><TD>                // which is private. We cannot use the 'new URI( scheme, userInfo, ... )' or</TD></TR><TR><TD CLASS="l">600</TD><TD>                // 'new URI( scheme, authority, ... )' constructors because they double</TD></TR><TR><TD CLASS="l">601</TD><TD>                // encode the query string using 'java.net.URI.quote'</TD></TR><TR><TD CLASS="l">602</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">603</TD><TD>                StringBuilder builder = new StringBuilder();</TD></TR><TR CLASS="c"><TD CLASS="l">604</TD><TD>                if ( uri.getScheme() != null )</TD></TR><TR><TD CLASS="l">605</TD><TD>                {</TD></TR><TR CLASS="c"><TD CLASS="l">606</TD><TD>                        builder.append( uri.getScheme() );</TD></TR><TR CLASS="c"><TD CLASS="l">607</TD><TD>                        builder.append( ':' );</TD></TR><TR><TD CLASS="l">608</TD><TD>                }</TD></TR><TR CLASS="c"><TD CLASS="l">609</TD><TD>                if ( uri.getHost() != null )</TD></TR><TR><TD CLASS="l">610</TD><TD>                {</TD></TR><TR CLASS="c"><TD CLASS="l">611</TD><TD>                        builder.append( &#34;//&#34; );</TD></TR><TR CLASS="c"><TD CLASS="l">612</TD><TD>                        if ( uri.getUserInfo() != null )</TD></TR><TR><TD CLASS="l">613</TD><TD>                        {</TD></TR><TR CLASS="c"><TD CLASS="l">614</TD><TD>                                builder.append( uri.getUserInfo() );</TD></TR><TR CLASS="c"><TD CLASS="l">615</TD><TD>                                builder.append( '@' );</TD></TR><TR><TD CLASS="l">616</TD><TD>                        }</TD></TR><TR CLASS="c"><TD CLASS="l">617</TD><TD>                        builder.append( uri.getHost() );</TD></TR><TR CLASS="c"><TD CLASS="l">618</TD><TD>                        if ( uri.getPort() != -1 )</TD></TR><TR><TD CLASS="l">619</TD><TD>                        {</TD></TR><TR CLASS="c"><TD CLASS="l">620</TD><TD>                                builder.append( ':' );</TD></TR><TR CLASS="c"><TD CLASS="l">621</TD><TD>                                builder.append( uri.getPort() );</TD></TR><TR><TD CLASS="l">622</TD><TD>                        }</TD></TR><TR><TD CLASS="l">623</TD><TD>                }</TD></TR><TR CLASS="c"><TD CLASS="l">624</TD><TD>                else if ( uri.getAuthority() != null )</TD></TR><TR><TD CLASS="l">625</TD><TD>                {</TD></TR><TR CLASS="c"><TD CLASS="l">626</TD><TD>                        builder.append( &#34;//&#34; );</TD></TR><TR CLASS="c"><TD CLASS="l">627</TD><TD>                        builder.append( uri.getAuthority() );</TD></TR><TR><TD CLASS="l">628</TD><TD>                }</TD></TR><TR CLASS="c"><TD CLASS="l">629</TD><TD>                if ( uri.getPath() != null )</TD></TR><TR CLASS="c"><TD CLASS="l">630</TD><TD>                        builder.append( uri.getPath() );</TD></TR><TR><TD CLASS="l">631</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">632</TD><TD>                String query = toString( separator );</TD></TR><TR CLASS="c"><TD CLASS="l">633</TD><TD>                if ( query.length() != 0 )</TD></TR><TR><TD CLASS="l">634</TD><TD>                {</TD></TR><TR CLASS="c"><TD CLASS="l">635</TD><TD>                        builder.append( '?' );</TD></TR><TR CLASS="c"><TD CLASS="l">636</TD><TD>                        builder.append( query );</TD></TR><TR><TD CLASS="l">637</TD><TD>                }</TD></TR><TR CLASS="c"><TD CLASS="l">638</TD><TD>                if ( uri.getFragment() != null )</TD></TR><TR><TD CLASS="l">639</TD><TD>                {</TD></TR><TR CLASS="c"><TD CLASS="l">640</TD><TD>                        builder.append( '#' );</TD></TR><TR CLASS="c"><TD CLASS="l">641</TD><TD>                        builder.append( uri.getFragment() );</TD></TR><TR><TD CLASS="l">642</TD><TD>                }</TD></TR><TR><TD CLASS="l">643</TD><TD> </TD></TR><TR><TD CLASS="l">644</TD><TD>                try</TD></TR><TR><TD CLASS="l">645</TD><TD>                {</TD></TR><TR CLASS="c"><TD CLASS="l">646</TD><TD>                        return new URI( builder.toString() );</TD></TR><TR><TD CLASS="l">647</TD><TD>                }</TD></TR><TR CLASS="z"><TD CLASS="l">648</TD><TD>                catch ( URISyntaxException e )</TD></TR><TR><TD CLASS="l">649</TD><TD>                {</TD></TR><TR><TD CLASS="l">650</TD><TD>                        // Can never happen, as the given URI will always be valid,</TD></TR><TR><TD CLASS="l">651</TD><TD>                        // and getQuery() will always return a valid query string</TD></TR><TR><TD CLASS="l">652</TD><TD> </TD></TR><TR CLASS="z"><TD CLASS="l">653</TD><TD>                        throw new RuntimeException( e );</TD></TR><TR><TD CLASS="l">654</TD><TD>                }</TD></TR><TR><TD CLASS="l">655</TD><TD>        }</TD></TR><TR><TD CLASS="l">656</TD><TD> </TD></TR><TR><TD CLASS="l">657</TD><TD>        /**</TD></TR><TR><TD CLASS="l">658</TD><TD>         * Compares the specified object with this UrlEncodedQueryString for equality.</TD></TR><TR><TD CLASS="l">659</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">660</TD><TD>         * Returns &lt;code&gt;true&lt;/code&gt; if the given object is also a UrlEncodedQueryString and the two</TD></TR><TR><TD CLASS="l">661</TD><TD>         * UrlEncodedQueryStrings have the same parameters. More formally, two UrlEncodedQueryStrings</TD></TR><TR><TD CLASS="l">662</TD><TD>         * &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt; represent the same UrlEncodedQueryString if</TD></TR><TR><TD CLASS="l">663</TD><TD>         * &lt;code&gt;t1.toString().equals(t2.toString())&lt;/code&gt;. This ensures that the</TD></TR><TR><TD CLASS="l">664</TD><TD>         * &lt;code&gt;equals&lt;/code&gt; method checks the ordering, as well as the existence, of every</TD></TR><TR><TD CLASS="l">665</TD><TD>         * parameter.</TD></TR><TR><TD CLASS="l">666</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">667</TD><TD>         * Clients interested only in the existence, not the ordering, of parameters are recommended to</TD></TR><TR><TD CLASS="l">668</TD><TD>         * use &lt;code&gt;getMap().equals&lt;/code&gt;.</TD></TR><TR><TD CLASS="l">669</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">670</TD><TD>         * This implementation first checks if the specified object is this UrlEncodedQueryString; if so</TD></TR><TR><TD CLASS="l">671</TD><TD>         * it returns &lt;code&gt;true&lt;/code&gt;. Then, it checks if the specified object is a</TD></TR><TR><TD CLASS="l">672</TD><TD>         * UrlEncodedQueryString whose toString() is identical to the toString() of this</TD></TR><TR><TD CLASS="l">673</TD><TD>         * UrlEncodedQueryString; if not, it returns &lt;code&gt;false&lt;/code&gt;. Otherwise, it returns</TD></TR><TR><TD CLASS="l">674</TD><TD>         * &lt;code&gt;true&lt;/code&gt;</TD></TR><TR><TD CLASS="l">675</TD><TD>         *</TD></TR><TR><TD CLASS="l">676</TD><TD>         * @param obj</TD></TR><TR><TD CLASS="l">677</TD><TD>         *            object to be compared for equality with this UrlEncodedQueryString.</TD></TR><TR><TD CLASS="l">678</TD><TD>         * @return &lt;code&gt;true&lt;/code&gt; if the specified object is equal to this UrlEncodedQueryString.</TD></TR><TR><TD CLASS="l">679</TD><TD>         */</TD></TR><TR><TD CLASS="l"><A NAME="d">680</A></TD><TD> </TD></TR><TR><TD CLASS="l">681</TD><TD>        @Override</TD></TR><TR><TD CLASS="l">682</TD><TD>        public boolean equals( Object obj )</TD></TR><TR><TD CLASS="l">683</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">684</TD><TD>                if ( obj == this )</TD></TR><TR CLASS="c"><TD CLASS="l">685</TD><TD>                        return true;</TD></TR><TR><TD CLASS="l">686</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">687</TD><TD>                if ( !( obj instanceof UrlEncodedQueryString ) )</TD></TR><TR CLASS="c"><TD CLASS="l">688</TD><TD>                        return false;</TD></TR><TR><TD CLASS="l">689</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">690</TD><TD>                String query = toString();</TD></TR><TR CLASS="c"><TD CLASS="l">691</TD><TD>                String thatQuery = ( (UrlEncodedQueryString) obj ).toString();</TD></TR><TR><TD CLASS="l">692</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">693</TD><TD>                return query.equals( thatQuery );</TD></TR><TR><TD CLASS="l">694</TD><TD>        }</TD></TR><TR><TD CLASS="l">695</TD><TD> </TD></TR><TR><TD CLASS="l">696</TD><TD>        /**</TD></TR><TR><TD CLASS="l">697</TD><TD>         * Returns a hash code value for the UrlEncodedQueryString.</TD></TR><TR><TD CLASS="l">698</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">699</TD><TD>         * The hash code of the UrlEncodedQueryString is defined to be the hash code of the</TD></TR><TR><TD CLASS="l">700</TD><TD>         * &lt;code&gt;String&lt;/code&gt; returned by toString(). This ensures the ordering, as well as the</TD></TR><TR><TD CLASS="l">701</TD><TD>         * existence, of parameters is taken into account.</TD></TR><TR><TD CLASS="l">702</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">703</TD><TD>         * Clients interested only in the existence, not the ordering, of parameters are recommended to</TD></TR><TR><TD CLASS="l">704</TD><TD>         * use &lt;code&gt;getMap().hashCode&lt;/code&gt;.</TD></TR><TR><TD CLASS="l">705</TD><TD>         *</TD></TR><TR><TD CLASS="l">706</TD><TD>         * @return a hash code value for this UrlEncodedQueryString.</TD></TR><TR><TD CLASS="l">707</TD><TD>         */</TD></TR><TR><TD CLASS="l"><A NAME="12">708</A></TD><TD> </TD></TR><TR><TD CLASS="l">709</TD><TD>        @Override</TD></TR><TR><TD CLASS="l">710</TD><TD>        public int hashCode()</TD></TR><TR><TD CLASS="l">711</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">712</TD><TD>                return toString().hashCode();</TD></TR><TR><TD CLASS="l">713</TD><TD>        }</TD></TR><TR><TD CLASS="l">714</TD><TD> </TD></TR><TR><TD CLASS="l">715</TD><TD>        /**</TD></TR><TR><TD CLASS="l">716</TD><TD>         * Returns a &lt;code&gt;www-form-urlencoded&lt;/code&gt; string of the query parameters.</TD></TR><TR><TD CLASS="l">717</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">718</TD><TD>         * The HTML specification recommends two parameter separators in &lt;a</TD></TR><TR><TD CLASS="l">719</TD><TD>         * href=&#34;http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4.1&#34;&gt;HTML 4.01</TD></TR><TR><TD CLASS="l">720</TD><TD>         * Specification: application/x-www-form-urlencoded&lt;/a&gt; and &lt;a</TD></TR><TR><TD CLASS="l">721</TD><TD>         * href=&#34;http://www.w3.org/TR/1999/REC-html401-19991224/appendix/notes.html#h-B.2.2&#34;&gt;HTML 4.01</TD></TR><TR><TD CLASS="l">722</TD><TD>         * Specification: Ampersands in URI attribute values&lt;/a&gt;. Of those, the ampersand is the more</TD></TR><TR><TD CLASS="l">723</TD><TD>         * commonly used and this method defaults to that.</TD></TR><TR><TD CLASS="l">724</TD><TD>         *</TD></TR><TR><TD CLASS="l">725</TD><TD>         * @return &lt;code&gt;www-form-urlencoded&lt;/code&gt; string, or &lt;code&gt;null&lt;/code&gt; if there are no</TD></TR><TR><TD CLASS="l">726</TD><TD>         *         parameters.</TD></TR><TR><TD CLASS="l">727</TD><TD>         */</TD></TR><TR><TD CLASS="l"><A NAME="1a">728</A></TD><TD> </TD></TR><TR><TD CLASS="l">729</TD><TD>        @Override</TD></TR><TR><TD CLASS="l">730</TD><TD>        public String toString()</TD></TR><TR><TD CLASS="l">731</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">732</TD><TD>                return toString( Separator.AMPERSAND );</TD></TR><TR><TD CLASS="l">733</TD><TD>        }</TD></TR><TR><TD CLASS="l">734</TD><TD> </TD></TR><TR><TD CLASS="l">735</TD><TD>        /**</TD></TR><TR><TD CLASS="l">736</TD><TD>         * Returns a &lt;code&gt;www-form-urlencoded&lt;/code&gt; string of the query parameters, using the given</TD></TR><TR><TD CLASS="l">737</TD><TD>         * separator between parameters.</TD></TR><TR><TD CLASS="l">738</TD><TD>         *</TD></TR><TR><TD CLASS="l">739</TD><TD>         * @param separator</TD></TR><TR><TD CLASS="l">740</TD><TD>         *            separator to use between parameters</TD></TR><TR><TD CLASS="l">741</TD><TD>         * @return &lt;code&gt;www-form-urlencoded&lt;/code&gt; string, or an empty String if there are no</TD></TR><TR><TD CLASS="l">742</TD><TD>         *         parameters</TD></TR><TR><TD CLASS="l">743</TD><TD>         */</TD></TR><TR><TD CLASS="l">744</TD><TD> </TD></TR><TR><TD CLASS="l">745</TD><TD>        // Note: this method takes a Separator, not just any String. Taking any String may</TD></TR><TR><TD CLASS="l">746</TD><TD>        // be useful in some circumstances (eg. you could pass '&amp;amp;' to generate query</TD></TR><TR><TD CLASS="l">747</TD><TD>        // strings for use in HTML pages) but would break the implied contract between</TD></TR><TR><TD CLASS="l">748</TD><TD>        // toString() and parse() (eg. you can always parse() what you toString() ).</TD></TR><TR><TD CLASS="l">749</TD><TD>        //</TD></TR><TR><TD CLASS="l"><A NAME="1">750</A></TD><TD>        // It was thought better to leave it to the user to explictly break this contract</TD></TR><TR><TD CLASS="l">751</TD><TD>        // (eg. toString().replaceAll( '&amp;', '&amp;amp;' ))</TD></TR><TR><TD CLASS="l">752</TD><TD>        public String toString( Separator separator )</TD></TR><TR><TD CLASS="l">753</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">754</TD><TD>                StringBuilder builder = new StringBuilder();</TD></TR><TR><TD CLASS="l">755</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">756</TD><TD>                for ( String strName : this.queryMap.keySet() )</TD></TR><TR><TD CLASS="l">757</TD><TD>                {</TD></TR><TR CLASS="c"><TD CLASS="l">758</TD><TD>                        for ( String strValue : this.queryMap.get( strName ) )</TD></TR><TR><TD CLASS="l">759</TD><TD>                        {</TD></TR><TR CLASS="c"><TD CLASS="l">760</TD><TD>                                if ( builder.length() != 0 )</TD></TR><TR CLASS="c"><TD CLASS="l">761</TD><TD>                                        builder.append( separator );</TD></TR><TR><TD CLASS="l">762</TD><TD> </TD></TR><TR><TD CLASS="l">763</TD><TD>                                // Encode names and values. Do this in toString(), rather than</TD></TR><TR><TD CLASS="l">764</TD><TD>                                // append/set, so that the Map always contains the</TD></TR><TR><TD CLASS="l">765</TD><TD>                                // raw, unencoded values</TD></TR><TR><TD CLASS="l">766</TD><TD> </TD></TR><TR><TD CLASS="l">767</TD><TD>                                try</TD></TR><TR><TD CLASS="l">768</TD><TD>                                {</TD></TR><TR CLASS="c"><TD CLASS="l">769</TD><TD>                                        builder.append( URLEncoder.encode( strName, &#34;UTF-8&#34; ) );</TD></TR><TR><TD CLASS="l">770</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">771</TD><TD>                                        if ( !&#34;&#34;.equals( strValue ) )</TD></TR><TR><TD CLASS="l">772</TD><TD>                                        {</TD></TR><TR CLASS="c"><TD CLASS="l">773</TD><TD>                                                builder.append( '=' );</TD></TR><TR CLASS="c"><TD CLASS="l">774</TD><TD>                                                builder.append( URLEncoder.encode( strValue, &#34;UTF-8&#34; ) );</TD></TR><TR><TD CLASS="l">775</TD><TD>                                        }</TD></TR><TR><TD CLASS="l">776</TD><TD>                                }</TD></TR><TR CLASS="z"><TD CLASS="l">777</TD><TD>                                catch ( UnsupportedEncodingException e )</TD></TR><TR><TD CLASS="l">778</TD><TD>                                {</TD></TR><TR><TD CLASS="l">779</TD><TD>                                        // Should never happen. UTF-8 should always be available</TD></TR><TR><TD CLASS="l">780</TD><TD>                                        // according to Java spec</TD></TR><TR><TD CLASS="l">781</TD><TD> </TD></TR><TR CLASS="p"><TD CLASS="l" TITLE="25% line coverage (2 out of 8 instructions)">782</TD><TD TITLE="25% line coverage (2 out of 8 instructions)">                                        throw new RuntimeException( e );</TD></TR><TR CLASS="c"><TD CLASS="l">783</TD><TD>                                }</TD></TR><TR><TD CLASS="l">784</TD><TD>                        }</TD></TR><TR><TD CLASS="l">785</TD><TD>                }</TD></TR><TR><TD CLASS="l">786</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">787</TD><TD>                return builder.toString();</TD></TR><TR><TD CLASS="l">788</TD><TD>        }</TD></TR><TR><TD CLASS="l">789</TD><TD> </TD></TR><TR><TD CLASS="l">790</TD><TD>        //</TD></TR><TR><TD CLASS="l">791</TD><TD>        // Private methods</TD></TR><TR><TD CLASS="l">792</TD><TD>        //</TD></TR><TR><TD CLASS="l">793</TD><TD> </TD></TR><TR><TD CLASS="l">794</TD><TD>        /**</TD></TR><TR><TD CLASS="l">795</TD><TD>         * Private constructor.</TD></TR><TR><TD CLASS="l">796</TD><TD>         * &lt;p&gt;</TD></TR><TR><TD CLASS="l">797</TD><TD>         * Clients should use one of the &lt;code&gt;create&lt;/code&gt; or &lt;code&gt;parse&lt;/code&gt; methods to create</TD></TR><TR><TD CLASS="l"><A NAME="5">798</A></TD><TD>         * a &lt;code&gt;UrlEncodedQueryString&lt;/code&gt;.</TD></TR><TR><TD CLASS="l">799</TD><TD>         */</TD></TR><TR><TD CLASS="l">800</TD><TD> </TD></TR><TR><TD CLASS="l">801</TD><TD>        private UrlEncodedQueryString()</TD></TR><TR CLASS="c"><TD CLASS="l">802</TD><TD>        {</TD></TR><TR><TD CLASS="l">803</TD><TD>                // Can never be called</TD></TR><TR CLASS="c"><TD CLASS="l">804</TD><TD>        }</TD></TR><TR><TD CLASS="l">805</TD><TD> </TD></TR><TR><TD CLASS="l">806</TD><TD>        /**</TD></TR><TR><TD CLASS="l">807</TD><TD>         * Helper method for append and set</TD></TR><TR><TD CLASS="l">808</TD><TD>         *</TD></TR><TR><TD CLASS="l">809</TD><TD>         * @param name</TD></TR><TR><TD CLASS="l">810</TD><TD>         *            the parameter's name</TD></TR><TR><TD CLASS="l">811</TD><TD>         * @param value</TD></TR><TR><TD CLASS="l">812</TD><TD>         *            the parameter's value</TD></TR><TR><TD CLASS="l">813</TD><TD>         * @param append</TD></TR><TR><TD CLASS="l">814</TD><TD>         *            whether to append (or set)</TD></TR><TR><TD CLASS="l"><A NAME="9">815</A></TD><TD>         */</TD></TR><TR><TD CLASS="l">816</TD><TD> </TD></TR><TR><TD CLASS="l">817</TD><TD>        private void appendOrSet( final String name, final String value, final boolean append )</TD></TR><TR><TD CLASS="l">818</TD><TD>        {</TD></TR><TR CLASS="c"><TD CLASS="l">819</TD><TD>                if ( name == null )</TD></TR><TR CLASS="c"><TD CLASS="l">820</TD><TD>                        throw new NullPointerException( &#34;name&#34; );</TD></TR><TR><TD CLASS="l">821</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">822</TD><TD>                if ( value == null &amp;&amp; append )</TD></TR><TR CLASS="c"><TD CLASS="l">823</TD><TD>                        return;</TD></TR><TR><TD CLASS="l">824</TD><TD> </TD></TR><TR><TD CLASS="l">825</TD><TD>                // If we're appending, and there's an existing parameter...</TD></TR><TR><TD CLASS="l">826</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">827</TD><TD>                if ( append )</TD></TR><TR><TD CLASS="l">828</TD><TD>                {</TD></TR><TR CLASS="c"><TD CLASS="l">829</TD><TD>                        List&lt;String&gt; listValues = this.queryMap.get( name );</TD></TR><TR><TD CLASS="l">830</TD><TD> </TD></TR><TR><TD CLASS="l">831</TD><TD>                        // ...add to it</TD></TR><TR><TD CLASS="l">832</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">833</TD><TD>                        if ( listValues != null )</TD></TR><TR><TD CLASS="l">834</TD><TD>                        {</TD></TR><TR CLASS="c"><TD CLASS="l">835</TD><TD>                                listValues.add( value );</TD></TR><TR CLASS="c"><TD CLASS="l">836</TD><TD>                                return;</TD></TR><TR><TD CLASS="l">837</TD><TD>                        }</TD></TR><TR CLASS="c"><TD CLASS="l">838</TD><TD>                }</TD></TR><TR><TD CLASS="l">839</TD><TD> </TD></TR><TR><TD CLASS="l">840</TD><TD>                // ...otherwise, if we're setting and the value is null...</TD></TR><TR><TD CLASS="l">841</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">842</TD><TD>                else if ( value == null )</TD></TR><TR><TD CLASS="l">843</TD><TD>                {</TD></TR><TR><TD CLASS="l">844</TD><TD>                        // ...remove it</TD></TR><TR><TD CLASS="l">845</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">846</TD><TD>                        this.queryMap.remove( name );</TD></TR><TR CLASS="c"><TD CLASS="l">847</TD><TD>                        return;</TD></TR><TR><TD CLASS="l">848</TD><TD>                }</TD></TR><TR><TD CLASS="l">849</TD><TD> </TD></TR><TR><TD CLASS="l">850</TD><TD>                // ...otherwise, create a new one</TD></TR><TR><TD CLASS="l">851</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">852</TD><TD>                List&lt;String&gt; listValues = new ArrayList&lt;String&gt;();</TD></TR><TR CLASS="c"><TD CLASS="l">853</TD><TD>                listValues.add( value );</TD></TR><TR><TD CLASS="l">854</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">855</TD><TD>                this.queryMap.put( name, listValues );</TD></TR><TR CLASS="c"><TD CLASS="l">856</TD><TD>        }</TD></TR><TR><TD CLASS="l">857</TD><TD> </TD></TR><TR><TD CLASS="l">858</TD><TD>        /**</TD></TR><TR><TD CLASS="l">859</TD><TD>         * Helper method for append and set</TD></TR><TR><TD CLASS="l">860</TD><TD>         *</TD></TR><TR><TD CLASS="l">861</TD><TD>         * @param query</TD></TR><TR><TD CLASS="l">862</TD><TD>         *            &lt;code&gt;www-form-urlencoded&lt;/code&gt; string</TD></TR><TR><TD CLASS="l">863</TD><TD>         * @param append</TD></TR><TR><TD CLASS="l">864</TD><TD>         *            whether to append (or set)</TD></TR><TR><TD CLASS="l">865</TD><TD>         */</TD></TR><TR><TD CLASS="l">866</TD><TD> </TD></TR><TR><TD CLASS="l"><A NAME="2">867</A></TD><TD>        private void appendOrSet( final CharSequence parameters, final boolean append )</TD></TR><TR><TD CLASS="l">868</TD><TD>        {</TD></TR><TR><TD CLASS="l">869</TD><TD>                // Nothing to do?</TD></TR><TR><TD CLASS="l">870</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">871</TD><TD>                if ( parameters == null )</TD></TR><TR CLASS="c"><TD CLASS="l">872</TD><TD>                        return;</TD></TR><TR><TD CLASS="l">873</TD><TD> </TD></TR><TR><TD CLASS="l">874</TD><TD>                // Note we always parse using PARSE_PARAMETER_SEPARATORS, regardless</TD></TR><TR><TD CLASS="l">875</TD><TD>                // of what the user later nominates as their output parameter</TD></TR><TR><TD CLASS="l">876</TD><TD>                // separator using toString()</TD></TR><TR><TD CLASS="l">877</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">878</TD><TD>                StringTokenizer tokenizer = new StringTokenizer( parameters.toString(), PARSE_PARAMETER_SEPARATORS );</TD></TR><TR><TD CLASS="l">879</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">880</TD><TD>                Set&lt;String&gt; setAlreadyParsed = null;</TD></TR><TR><TD CLASS="l">881</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">882</TD><TD>                while ( tokenizer.hasMoreTokens() )</TD></TR><TR><TD CLASS="l">883</TD><TD>                {</TD></TR><TR CLASS="c"><TD CLASS="l">884</TD><TD>                        String parameter = tokenizer.nextToken();</TD></TR><TR><TD CLASS="l">885</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">886</TD><TD>                        int indexOf = parameter.indexOf( '=' );</TD></TR><TR><TD CLASS="l">887</TD><TD> </TD></TR><TR><TD CLASS="l">888</TD><TD>                        String strName;</TD></TR><TR><TD CLASS="l">889</TD><TD>                        String strValue;</TD></TR><TR><TD CLASS="l">890</TD><TD> </TD></TR><TR><TD CLASS="l">891</TD><TD>                        try</TD></TR><TR><TD CLASS="l">892</TD><TD>                        {</TD></TR><TR CLASS="c"><TD CLASS="l">893</TD><TD>                                if ( indexOf == -1 )</TD></TR><TR><TD CLASS="l">894</TD><TD>                                {</TD></TR><TR CLASS="c"><TD CLASS="l">895</TD><TD>                                        strName = parameter;</TD></TR><TR CLASS="c"><TD CLASS="l">896</TD><TD>                                        strValue = &#34;&#34;;</TD></TR><TR><TD CLASS="l">897</TD><TD>                                }</TD></TR><TR><TD CLASS="l">898</TD><TD>                                else</TD></TR><TR><TD CLASS="l">899</TD><TD>                                {</TD></TR><TR CLASS="c"><TD CLASS="l">900</TD><TD>                                        strName = parameter.substring( 0, indexOf );</TD></TR><TR CLASS="c"><TD CLASS="l">901</TD><TD>                                        strValue = parameter.substring( indexOf + 1 );</TD></TR><TR><TD CLASS="l">902</TD><TD>                                }</TD></TR><TR><TD CLASS="l">903</TD><TD> </TD></TR><TR><TD CLASS="l">904</TD><TD>                                // When not appending, the first time we see a given</TD></TR><TR><TD CLASS="l">905</TD><TD>                                // name it is important to remove it from the existing</TD></TR><TR><TD CLASS="l">906</TD><TD>                                // parameters</TD></TR><TR><TD CLASS="l">907</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">908</TD><TD>                                if ( !append )</TD></TR><TR><TD CLASS="l">909</TD><TD>                                {</TD></TR><TR CLASS="c"><TD CLASS="l">910</TD><TD>                                        if ( setAlreadyParsed == null )</TD></TR><TR CLASS="c"><TD CLASS="l">911</TD><TD>                                                setAlreadyParsed = new HashSet&lt;String&gt;();</TD></TR><TR><TD CLASS="l">912</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">913</TD><TD>                                        if ( !setAlreadyParsed.contains( strName ) )</TD></TR><TR CLASS="c"><TD CLASS="l">914</TD><TD>                                                remove( strName );</TD></TR><TR><TD CLASS="l">915</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">916</TD><TD>                                        setAlreadyParsed.add( strName );</TD></TR><TR><TD CLASS="l">917</TD><TD>                                }</TD></TR><TR><TD CLASS="l">918</TD><TD> </TD></TR><TR CLASS="c"><TD CLASS="l">919</TD><TD>                                appendOrSet( strName, URLDecoder.decode( strValue, &#34;UTF-8&#34; ), true );</TD></TR><TR><TD CLASS="l">920</TD><TD>                        }</TD></TR><TR CLASS="z"><TD CLASS="l">921</TD><TD>                        catch ( UnsupportedEncodingException e )</TD></TR><TR><TD CLASS="l">922</TD><TD>                        {</TD></TR><TR><TD CLASS="l">923</TD><TD>                                // Should never happen. UTF-8 should always be available</TD></TR><TR><TD CLASS="l">924</TD><TD>                                // according to Java spec</TD></TR><TR><TD CLASS="l">925</TD><TD> </TD></TR><TR CLASS="z"><TD CLASS="l">926</TD><TD>                                throw new RuntimeException( e );</TD></TR><TR CLASS="c"><TD CLASS="l">927</TD><TD>                        }</TD></TR><TR CLASS="c"><TD CLASS="l">928</TD><TD>                }</TD></TR><TR CLASS="c"><TD CLASS="l">929</TD><TD>        }</TD></TR><TR><TD CLASS="l">930</TD><TD>}</TD></TR></TABLE><P></P><TABLE CLASS="hdft" CELLSPACING="0" WIDTH="100%"><TR><TD CLASS="nv">[<A HREF="../coverage.html">all classes</A>][<A HREF="0.html">com.kennardconsulting.core.net</A>]</TD></TR><TR><TD CLASS="tl"><A HREF="http://sourceforge.net/projects/emma">EMMA 2.1.5320 (stable)</A> (C) Vladimir Roubtsov</TD></TR></TABLE></BODY></HTML>